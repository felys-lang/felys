use crate::builder::common::{Common, Root};
use proc_macro2::TokenStream;
use quote::quote;
use std::fs;
use std::fs::{File, OpenOptions};
use std::io::Write;
use std::path::{Path, PathBuf};

impl Root {
    pub fn write(&self, base: &Path, name: &str) {
        let mut path = PathBuf::from(base);
        path.push(name);
        if !fs::exists(&path).unwrap() {
            fs::create_dir(&path).unwrap();
        }

        write(&path, "mod.rs", &self.module);
        write(&path, "core.rs", &self.core);
        let mut helper = PathBuf::from(&path);
        helper.push("helper.rs");
        OpenOptions::new()
            .append(true)
            .create(true)
            .open(helper)
            .unwrap();

        self.common.write(&path, "common");
    }
}

impl Common {
    fn write(&self, base: &Path, name: &str) {
        let mut path = PathBuf::from(base);
        path.push(name);
        if !fs::exists(&path).unwrap() {
            fs::create_dir(&path).unwrap();
        }

        write(&path, "mod.rs", &self.module);
        write(&path, "intern.rs", &self.intern);
        write(&path, "memoize.rs", &self.memoize);
        write(&path, "packrat.rs", &self.packrat);
        write(&path, "stream.rs", &self.stream);
    }
}

fn write(base: &Path, name: &str, content: &TokenStream) {
    let mut path = PathBuf::from(base);
    path.push(name);
    let content = quote! {
        #![doc = "Generated by rspegen"]
        #content
    };
    File::create(path)
        .unwrap()
        .write_all(content.to_string().as_bytes())
        .unwrap();
}
