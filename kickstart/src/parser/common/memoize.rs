# ! [doc = "Generated by rspegen"] use std :: collections :: HashMap ; use crate :: ast ::*; # [allow (unused_imports)] use crate :: builder :: common :: s2c ; # [allow (non_snake_case , unused)] # [derive (Default)] pub struct Memo { pub union : HashMap < (usize , bool) , (usize , Option < Regex >) > , pub concat : HashMap < (usize , bool) , (usize , Option < Regex >) > , pub repeat : HashMap < (usize , bool) , (usize , Option < Regex >) > , pub NAME : HashMap < (usize , bool) , (usize , Option < usize >) > , } # [allow (unused)] impl Memo { pub fn clean (& mut self) { self . union . clear () ; self . concat . clear () ; self . repeat . clear () ; self . NAME . clear () ; } }