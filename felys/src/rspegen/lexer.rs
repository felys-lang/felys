# [allow (non_snake_case , unused)] impl super :: Packrat { pub fn ADD (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 43usize ..= 43usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn SUB (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 45usize ..= 45usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn MUL (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 42usize ..= 42usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn DIV (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 47usize ..= 47usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn MOD (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 37usize ..= 37usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn GE (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 62usize ..= 62usize) => 1usize , (1usize , 61usize ..= 61usize) => 2usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 3usize] = [false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn LE (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 60usize ..= 60usize) => 1usize , (1usize , 61usize ..= 61usize) => 2usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 3usize] = [false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn GT (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 62usize ..= 62usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn LT (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 60usize ..= 60usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn EQ (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 61usize ..= 61usize) => 1usize , (1usize , 61usize ..= 61usize) => 2usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 3usize] = [false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn NE (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 33usize ..= 33usize) => 1usize , (1usize , 61usize ..= 61usize) => 2usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 3usize] = [false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn OR (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 111usize ..= 111usize) => 1usize , (1usize , 114usize ..= 114usize) => 2usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 3usize] = [false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn AND (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 97usize ..= 97usize) => 1usize , (1usize , 110usize ..= 110usize) => 2usize , (2usize , 100usize ..= 100usize) => 3usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 4usize] = [false , false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn NOT (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 110usize ..= 110usize) => 1usize , (1usize , 111usize ..= 111usize) => 2usize , (2usize , 116usize ..= 116usize) => 3usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 4usize] = [false , false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn TRUE (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 116usize ..= 116usize) => 1usize , (1usize , 114usize ..= 114usize) => 2usize , (2usize , 117usize ..= 117usize) => 3usize , (3usize , 101usize ..= 101usize) => 4usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 5usize] = [false , false , false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn FALSE (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 102usize ..= 102usize) => 1usize , (1usize , 97usize ..= 97usize) => 2usize , (2usize , 108usize ..= 108usize) => 3usize , (3usize , 115usize ..= 115usize) => 4usize , (4usize , 101usize ..= 101usize) => 5usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 6usize] = [false , false , false , false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn IDENT (& mut self) -> Option < usize > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 65usize ..= 90usize) => 1usize , (0usize , 95usize ..= 95usize) => 1usize , (0usize , 97usize ..= 122usize) => 1usize , (1usize , 48usize ..= 57usize) => 1usize , (1usize , 65usize ..= 90usize) => 1usize , (1usize , 95usize ..= 95usize) => 1usize , (1usize , 97usize ..= 122usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; let start = self . stream . mark () ; let mode = self . stream . mode () ; if let Some (& (end , cache)) = self . memo . IDENT . get (& (start , mode)) { self . stream . jump (end) ; return cache ; } self . stream . trim () ; let result = self . stream . dfa (transition , ACCEPTANCE) . map (| s | self . intern . id (s)) ; let end = self . stream . mark () ; self . memo . IDENT . insert ((start , mode) , (end , result)) ; result } pub fn WS (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 9usize ..= 9usize) => 1usize , (0usize , 10usize ..= 10usize) => 1usize , (0usize , 13usize ..= 13usize) => 1usize , (0usize , 32usize ..= 32usize) => 1usize , (1usize , 9usize ..= 9usize) => 1usize , (1usize , 10usize ..= 10usize) => 1usize , (1usize , 13usize ..= 13usize) => 1usize , (1usize , 32usize ..= 32usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 2usize] = [false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } pub fn COMMENT (& mut self) -> Option < () > { if self . snapshot . is_some () { return None ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 47usize ..= 47usize) => 1usize , (1usize , 47usize ..= 47usize) => 2usize , (2usize , 0usize ..= 9usize) => 2usize , (2usize , 11usize ..= 18446744073709551615usize) => 2usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 3usize] = [false , false , true] ; self . stream . trim () ; self . stream . dfa (transition , ACCEPTANCE) . map (| _ | ()) } } # [allow (unused)] impl super :: Stream { pub fn trim (& mut self) { if self . mode () { return ; } fn transition (s : usize , c : char) -> Option < usize > { let s = match (s , c as usize) { (0usize , 9usize ..= 9usize) => 1usize , (0usize , 10usize ..= 10usize) => 1usize , (0usize , 13usize ..= 13usize) => 1usize , (0usize , 32usize ..= 32usize) => 1usize , (0usize , 47usize ..= 47usize) => 2usize , (2usize , 47usize ..= 47usize) => 3usize , (3usize , 0usize ..= 9usize) => 3usize , (3usize , 11usize ..= 18446744073709551615usize) => 3usize , (1usize , 9usize ..= 9usize) => 1usize , (1usize , 10usize ..= 10usize) => 1usize , (1usize , 13usize ..= 13usize) => 1usize , (1usize , 32usize ..= 32usize) => 1usize , _ => return None , } ; Some (s) } const ACCEPTANCE : [bool ; 4usize] = [false , true , false , true] ; loop { if self . dfa (transition , ACCEPTANCE) . is_none () { break ; } } } }