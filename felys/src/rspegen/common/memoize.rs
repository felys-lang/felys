# ! [doc = "Generated by rspegen"] use std :: collections :: HashMap ; use crate :: ast ::*; use std :: rc :: Rc ; # [allow (non_snake_case , unused)] # [derive (Default)] pub struct Memo { pub expr : HashMap < (usize , bool) , (usize , Option < Expr >) > , pub disjunction : HashMap < (usize , bool) , (usize , Option < Expr >) > , pub conjunction : HashMap < (usize , bool) , (usize , Option < Expr >) > , pub equality : HashMap < (usize , bool) , (usize , Option < Expr >) > , pub comparison : HashMap < (usize , bool) , (usize , Option < Expr >) > , pub term : HashMap < (usize , bool) , (usize , Option < Expr >) > , pub factor : HashMap < (usize , bool) , (usize , Option < Expr >) > , pub evaluation : HashMap < (usize , bool) , (usize , Option < Expr >) > , } # [allow (unused)] impl Memo { pub fn clean (& mut self) { self . expr . clear () ; self . disjunction . clear () ; self . conjunction . clear () ; self . equality . clear () ; self . comparison . clear () ; self . term . clear () ; self . factor . clear () ; self . evaluation . clear () ; } }