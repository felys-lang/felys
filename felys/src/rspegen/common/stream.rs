#![doc = "Generated by rspegen"]
#[allow(unused)]
pub struct Stream {
    pub data: String,
    pub cursor: usize,
    pub strict: bool,
}
impl From<String> for Stream {
    fn from(value: String) -> Self {
        Self {
            data: value,
            cursor: 0,
            strict: false,
        }
    }
}
impl Iterator for Stream {
    type Item = char;
    fn next(&mut self) -> Option<Self::Item> {
        let remaining = &self.data[self.cursor..];
        let ch = remaining.chars().next()?;
        self.cursor += ch.len_utf8();
        Some(ch)
    }
}
#[allow(unused)]
impl Stream {
    pub fn dfa<const S: usize>(
        &mut self,
        transition: fn(usize, char) -> Option<usize>,
        acceptance: [bool; S],
    ) -> Option<&str> {
        let start = self.cursor;
        let mut end = start;
        let mut s = 0usize;
        while let Some(c) = self.next() {
            s = match transition(s, c) {
                Some(s) => s,
                None => break,
            };
            end = self.cursor;
        }
        if acceptance[s] {
            self.cursor = end;
            Some(&self.data[start..end])
        } else {
            self.cursor = start;
            None
        }
    }
    pub fn peek(&mut self) -> Option<char> {
        self.data[self.cursor..].chars().next()
    }
}
