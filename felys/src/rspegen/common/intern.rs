#![doc = "Generated by rspegen"]
use std::collections::HashMap;
use std::rc::Rc;
#[allow(unused)]
#[derive(Default)]
pub struct Intern {
    data: HashMap<Rc<str>, usize>,
    fast: Vec<Rc<str>>,
}
#[allow(unused)]
impl Intern {
    pub fn id(&mut self, s: &str) -> usize {
        if let Some(&id) = self.data.get(s) {
            id
        } else {
            let key = Rc::<str>::from(s);
            let id = self.fast.len();
            self.fast.push(key.clone());
            self.data.insert(key, id);
            id
        }
    }
    pub fn get(&self, id: &usize) -> Option<&str> {
        let string = self.fast.get(*id)?;
        Some(&(**string))
    }
}
