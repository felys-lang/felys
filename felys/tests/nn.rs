use felys::{Config, Packrat};
use std::collections::HashMap;

const IRIS: &str = r#"
iris = [
    ([ 4.9, 3.0, 1.4, 0.2; ], [ 0.0; ]),
    ([ 6.4, 3.1, 5.5, 1.8; ], [ 2.0; ]),
    ([ 6.3, 3.4, 5.6, 2.4; ], [ 2.0; ]),
    ([ 6.8, 3.2, 5.9, 2.3; ], [ 2.0; ]),
    ([ 5.5, 2.4, 3.8, 1.1; ], [ 1.0; ]),
    ([ 5.0, 3.5, 1.6, 0.6; ], [ 0.0; ]),
    ([ 5.4, 3.9, 1.7, 0.4; ], [ 0.0; ]),
    ([ 7.7, 2.6, 6.9, 2.3; ], [ 2.0; ]),
    ([ 5.1, 3.8, 1.5, 0.3; ], [ 0.0; ]),
    ([ 7.4, 2.8, 6.1, 1.9; ], [ 2.0; ]),
    ([ 5.5, 2.6, 4.4, 1.2; ], [ 1.0; ]),
    ([ 5.4, 3.4, 1.7, 0.2; ], [ 0.0; ]),
    ([ 5.9, 3.0, 5.1, 1.8; ], [ 2.0; ]),
    ([ 5.7, 2.8, 4.5, 1.3; ], [ 1.0; ]),
    ([ 6.4, 2.7, 5.3, 1.9; ], [ 2.0; ]),
    ([ 5.5, 2.3, 4.0, 1.3; ], [ 1.0; ]),
    ([ 5.3, 3.7, 1.5, 0.2; ], [ 0.0; ]),
    ([ 5.8, 2.6, 4.0, 1.2; ], [ 1.0; ]),
    ([ 6.6, 3.0, 4.4, 1.4; ], [ 1.0; ]),
    ([ 5.1, 3.5, 1.4, 0.3; ], [ 0.0; ]),
    ([ 6.3, 2.3, 4.4, 1.3; ], [ 1.0; ]),
    ([ 6.7, 3.3, 5.7, 2.1; ], [ 2.0; ]),
    ([ 5.1, 3.3, 1.7, 0.5; ], [ 0.0; ]),
    ([ 7.3, 2.9, 6.3, 1.8; ], [ 2.0; ]),
    ([ 6.0, 2.2, 4.0, 1.0; ], [ 1.0; ]),
    ([ 5.7, 2.5, 5.0, 2.0; ], [ 2.0; ]),
    ([ 5.8, 2.8, 5.1, 2.4; ], [ 2.0; ]),
    ([ 6.6, 2.9, 4.6, 1.3; ], [ 1.0; ]),
    ([ 4.9, 3.1, 1.5, 0.1; ], [ 0.0; ]),
    ([ 4.8, 3.1, 1.6, 0.2; ], [ 0.0; ]),
    ([ 6.7, 3.1, 4.4, 1.4; ], [ 1.0; ]),
    ([ 7.1, 3.0, 5.9, 2.1; ], [ 2.0; ]),
    ([ 5.6, 3.0, 4.5, 1.5; ], [ 1.0; ]),
    ([ 6.2, 3.4, 5.4, 2.3; ], [ 2.0; ]),
    ([ 5.0, 3.4, 1.6, 0.4; ], [ 0.0; ]),
    ([ 6.4, 2.8, 5.6, 2.1; ], [ 2.0; ]),
    ([ 4.4, 2.9, 1.4, 0.2; ], [ 0.0; ]),
    ([ 5.0, 2.0, 3.5, 1.0; ], [ 1.0; ]),
    ([ 6.1, 3.0, 4.9, 1.8; ], [ 2.0; ]),
    ([ 5.0, 3.6, 1.4, 0.2; ], [ 0.0; ]),
    ([ 6.1, 2.6, 5.6, 1.4; ], [ 2.0; ]),
    ([ 7.2, 3.0, 5.8, 1.6; ], [ 2.0; ]),
    ([ 6.0, 3.4, 4.5, 1.6; ], [ 1.0; ]),
    ([ 6.9, 3.1, 5.1, 2.3; ], [ 2.0; ]),
    ([ 6.1, 2.8, 4.7, 1.2; ], [ 1.0; ]),
    ([ 6.7, 2.5, 5.8, 1.8; ], [ 2.0; ]),
    ([ 5.9, 3.0, 4.2, 1.5; ], [ 1.0; ]),
    ([ 5.0, 3.0, 1.6, 0.2; ], [ 0.0; ]),
    ([ 6.1, 2.9, 4.7, 1.4; ], [ 1.0; ]),
    ([ 6.3, 2.7, 4.9, 1.8; ], [ 2.0; ]),
    ([ 5.7, 2.8, 4.1, 1.3; ], [ 1.0; ]),
    ([ 4.3, 3.0, 1.1, 0.1; ], [ 0.0; ]),
    ([ 4.5, 2.3, 1.3, 0.3; ], [ 0.0; ]),
    ([ 5.7, 3.0, 4.2, 1.2; ], [ 1.0; ]),
    ([ 5.1, 3.8, 1.9, 0.4; ], [ 0.0; ]),
    ([ 5.2, 3.4, 1.4, 0.2; ], [ 0.0; ]),
    ([ 6.1, 2.8, 4.0, 1.3; ], [ 1.0; ]),
    ([ 6.5, 3.0, 5.2, 2.0; ], [ 2.0; ]),
    ([ 6.0, 2.7, 5.1, 1.6; ], [ 1.0; ]),
    ([ 6.2, 2.8, 4.8, 1.8; ], [ 2.0; ]),
    ([ 5.4, 3.9, 1.3, 0.4; ], [ 0.0; ]),
    ([ 6.3, 2.8, 5.1, 1.5; ], [ 2.0; ]),
    ([ 5.6, 3.0, 4.1, 1.3; ], [ 1.0; ]),
    ([ 4.6, 3.6, 1.0, 0.2; ], [ 0.0; ]),
    ([ 6.3, 3.3, 4.7, 1.6; ], [ 1.0; ]),
    ([ 6.4, 2.9, 4.3, 1.3; ], [ 1.0; ]),
    ([ 4.7, 3.2, 1.3, 0.2; ], [ 0.0; ]),
    ([ 5.1, 3.8, 1.6, 0.2; ], [ 0.0; ]),
    ([ 4.6, 3.1, 1.5, 0.2; ], [ 0.0; ]),
    ([ 5.4, 3.4, 1.5, 0.4; ], [ 0.0; ]),
    ([ 5.9, 3.2, 4.8, 1.8; ], [ 1.0; ]),
    ([ 4.9, 3.1, 1.5, 0.1; ], [ 0.0; ]),
    ([ 6.9, 3.1, 5.4, 2.1; ], [ 2.0; ]),
    ([ 6.7, 3.3, 5.7, 2.5; ], [ 2.0; ]),
    ([ 5.1, 3.5, 1.4, 0.2; ], [ 0.0; ]),
    ([ 5.5, 2.4, 3.7, 1.0; ], [ 1.0; ]),
    ([ 5.6, 2.9, 3.6, 1.3; ], [ 1.0; ]),
    ([ 5.7, 2.9, 4.2, 1.3; ], [ 1.0; ]),
    ([ 4.6, 3.4, 1.4, 0.3; ], [ 0.0; ]),
    ([ 5.7, 4.4, 1.5, 0.4; ], [ 0.0; ]),
    ([ 5.7, 3.8, 1.7, 0.3; ], [ 0.0; ]),
    ([ 5.1, 2.5, 3.0, 1.1; ], [ 1.0; ]),
    ([ 7.9, 3.8, 6.4, 2.0; ], [ 2.0; ]),
    ([ 4.8, 3.4, 1.6, 0.2; ], [ 0.0; ]),
    ([ 4.8, 3.0, 1.4, 0.1; ], [ 0.0; ]),
    ([ 6.4, 2.8, 5.6, 2.2; ], [ 2.0; ]),
    ([ 4.8, 3.0, 1.4, 0.3; ], [ 0.0; ]),
    ([ 5.6, 2.8, 4.9, 2.0; ], [ 2.0; ]),
    ([ 5.0, 2.3, 3.3, 1.0; ], [ 1.0; ]),
    ([ 6.2, 2.2, 4.5, 1.5; ], [ 1.0; ]),
    ([ 7.6, 3.0, 6.6, 2.1; ], [ 2.0; ]),
    ([ 6.8, 2.8, 4.8, 1.4; ], [ 1.0; ]),
    ([ 7.7, 2.8, 6.7, 2.0; ], [ 2.0; ]),
    ([ 4.6, 3.2, 1.4, 0.2; ], [ 0.0; ]),
    ([ 5.2, 3.5, 1.5, 0.2; ], [ 0.0; ]),
    ([ 7.2, 3.2, 6.0, 1.8; ], [ 2.0; ]),
    ([ 6.5, 3.0, 5.8, 2.2; ], [ 2.0; ]),
    ([ 5.0, 3.5, 1.3, 0.3; ], [ 0.0; ]),
    ([ 5.0, 3.3, 1.4, 0.2; ], [ 0.0; ]),
    ([ 5.7, 2.6, 3.5, 1.0; ], [ 1.0; ]),
    ([ 4.8, 3.4, 1.9, 0.2; ], [ 0.0; ]),
    ([ 5.5, 2.5, 4.0, 1.3; ], [ 1.0; ]),
    ([ 5.8, 2.7, 5.1, 1.9; ], [ 2.0; ]),
    ([ 4.7, 3.2, 1.6, 0.2; ], [ 0.0; ]),
    ([ 6.3, 3.3, 6.0, 2.5; ], [ 2.0; ]),
    ([ 5.5, 3.5, 1.3, 0.2; ], [ 0.0; ]),
    ([ 6.0, 2.9, 4.5, 1.5; ], [ 1.0; ]),
    ([ 7.7, 3.0, 6.1, 2.3; ], [ 2.0; ]),
    ([ 4.4, 3.0, 1.3, 0.2; ], [ 0.0; ]),
    ([ 4.9, 2.4, 3.3, 1.0; ], [ 1.0; ]),
    ([ 6.8, 3.0, 5.5, 2.1; ], [ 2.0; ]),
    ([ 6.2, 2.9, 4.3, 1.3; ], [ 1.0; ]),
    ([ 7.0, 3.2, 4.7, 1.4; ], [ 1.0; ]),
    ([ 5.1, 3.7, 1.5, 0.4; ], [ 0.0; ]),
    ([ 7.7, 3.8, 6.7, 2.2; ], [ 2.0; ]),
    ([ 6.3, 2.5, 4.9, 1.5; ], [ 1.0; ]),
    ([ 7.2, 3.6, 6.1, 2.5; ], [ 2.0; ]),
    ([ 5.0, 3.4, 1.5, 0.2; ], [ 0.0; ]),
    ([ 6.5, 3.0, 5.5, 1.8; ], [ 2.0; ]),
    ([ 6.7, 3.1, 4.7, 1.5; ], [ 1.0; ]),
    ([ 5.6, 2.7, 4.2, 1.3; ], [ 1.0; ]),
    ([ 6.0, 3.0, 4.8, 1.8; ], [ 2.0; ]),
    ([ 5.8, 2.7, 3.9, 1.2; ], [ 1.0; ]),
    ([ 5.8, 2.7, 4.1, 1.0; ], [ 1.0; ]),
    ([ 4.4, 3.2, 1.3, 0.2; ], [ 0.0; ]),
    ([ 5.1, 3.4, 1.5, 0.2; ], [ 0.0; ]),
    ([ 5.2, 2.7, 3.9, 1.4; ], [ 1.0; ]),
    ([ 6.0, 2.2, 5.0, 1.5; ], [ 2.0; ]),
    ([ 6.4, 3.2, 4.5, 1.5; ], [ 1.0; ]),
    ([ 5.4, 3.7, 1.5, 0.2; ], [ 0.0; ]),
    ([ 4.9, 3.1, 1.5, 0.1; ], [ 0.0; ]),
    ([ 6.5, 2.8, 4.6, 1.5; ], [ 1.0; ]),
    ([ 6.7, 3.1, 5.6, 2.4; ], [ 2.0; ]),
    ([ 5.6, 2.5, 3.9, 1.1; ], [ 1.0; ]),
    ([ 6.1, 3.0, 4.6, 1.4; ], [ 1.0; ]),
    ([ 6.7, 3.0, 5.2, 2.3; ], [ 2.0; ]),
    ([ 5.0, 3.2, 1.2, 0.2; ], [ 0.0; ]),
    ([ 6.9, 3.1, 4.9, 1.5; ], [ 1.0; ]),
    ([ 6.5, 3.2, 5.1, 2.0; ], [ 2.0; ]),
    ([ 6.9, 3.2, 5.7, 2.3; ], [ 2.0; ]),
    ([ 6.3, 2.9, 5.6, 1.8; ], [ 2.0; ]),
    ([ 5.5, 4.2, 1.4, 0.2; ], [ 0.0; ]),
    ([ 4.9, 2.5, 4.5, 1.7; ], [ 2.0; ]),
    ([ 6.3, 2.5, 5.0, 1.9; ], [ 2.0; ]),
    ([ 5.2, 4.1, 1.5, 0.1; ], [ 0.0; ]),
    ([ 5.8, 4.0, 1.2, 0.2; ], [ 0.0; ]),
    ([ 5.4, 3.0, 4.5, 1.5; ], [ 1.0; ]),
    ([ 6.4, 3.2, 5.3, 2.3; ], [ 2.0; ]),
    ([ 6.7, 3.0, 5.0, 1.7; ], [ 1.0; ]),
    ([ 5.8, 2.7, 5.1, 1.9; ], [ 2.0; ]),
];
"#;

#[test]
fn operator() -> Result<(), String> {
    assert_eq!(
        "[\n  1.00000 1.00000 ;\n  1.00000 1.00000 ;\n](backward: Fixed)",
        print("[1.0, 1.0; 1.0, 1.0;]")?
    );
    assert_eq!(
        "[\n  -0.04953 -0.08237 ;\n  0.01546 -0.05549 ;\n](backward: Learnable(14))",
        print("<2, 2>")?
    );
    assert_eq!("[\n  0.04953 ;\n](backward: Neg)", print("-<1, 1>")?);
    assert_eq!(
        "[\n  -0.13191 ;\n](backward: Add)",
        print("<1, 1> + <1, 1>")?
    );
    assert_eq!(
        "[\n  0.03284 ;\n](backward: Sub)",
        print("<1, 1> - <1, 1>")?
    );
    assert_eq!(
        "[\n  0.00408 ;\n](backward: Mul)",
        print("<1, 1> * <1, 1>")?
    );
    assert_eq!(
        "[\n  0.60129 ;\n](backward: Div)",
        print("<1, 1> / <1, 1>")?
    );
    assert_eq!(
        "[\n  0.00381 ;\n](backward: Dot)",
        print("<1, 2> @ <2, 1>")?
    );
    assert_eq!(
        "[\n  0.00000 0.00000 0.01546 ;\n](backward: ReLU)",
        print("rust ReLU(<1, 3>)")?
    );
    assert_eq!(
        "[\n  1.14300 ;\n](backward: CrossEntropy)",
        print("rust CrossEntropy(<1, 3>, [ 1.0; ])")?
    );
    Ok(())
}

#[test]
fn classification() -> Result<(), String> {
    const CODE: &str = r#"
    sequential = [
        |x| x @ <4, 8> + <1, 8>,
        |x| rust ReLU(x),
        |x| x @ <8, 8> + <1, 8>,
        |x| rust ReLU(x),
        |x| x @ <8, 3> + <1, 3>,
    ];

    epoch = 0;
    while epoch < 50 {
        loss = [ 0.0; ];
        counter = 0;
        for (x, y) in iris {
            for fn in sequential {
                x = fn(x);
            }
            loss += rust CrossEntropy(x, y);
            counter += 1;

            if counter == 15 {
                step loss by 0.01 / 15.0;
                loss = [ 0.0; ];
                counter = 0;
            }
        }
        epoch += 1;
    }
    "#;
    let code = format!("{IRIS}{CODE}");
    let params = HashMap::new();
    let config = Config::new(params, 1000, 0.9, 42);
    let output = Packrat::from(code).parse()?.config(config).exec();
    for line in output.stdout {
        println!("{line}");
    }
    for (id, (params, momentum)) in output.params {
        println!("{id}: {params} {momentum}");
    }
    Ok(())
}

fn print(code: &str) -> Result<String, String> {
    let wrapped = format!("print {{ {code} }};");
    let params = HashMap::new();
    let config = Config::new(params, 100, 0.9, 42);
    let output = Packrat::from(wrapped).parse()?.config(config).exec();
    Ok(output.stdout.join("\n"))
}
